1:"$Sreact.fragment"
2:I[39756,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
3:I[37457,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
4:I[32467,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/8a3eabb26aae0ead.js"],"default"]
a:I[68027,[],"default"]
:HL["/workshop02025/_next/static/chunks/0412ffd35ac3b698.css","style"]
:HC["/",""]
:HL["/workshop02025/_next/static/chunks/9250416d356bc8bb.css","style"]
0:{"P":null,"b":"2rj58keNmxjASEdIYN92B","p":"/workshop02025","c":["",""],"i":false,"f":[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/workshop02025/_next/static/chunks/0412ffd35ac3b698.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L4",null,{"slides":[{"id":"0/1","content":"## UCCPS Beginners' Workshop\r\n\r\n16/10/2025\r\n\r\nJustin Leung\r\n\r\nSlides are at [http://uccps.github.io/workshop02025](http://uccps.github.io/workshop02025)"},{"id":"1/1","content":"## What is competitive programming?\r\n\r\nSimply put, competitive programming is about solving mathematical / computer science puzzles as fast as possible.\r\n\r\nYou can enjoy competitive programming in many ways:\r\n- Enjoying puzzles themselves, coming up with *elegant* solutions\r\n- Competing against others in contests\r\n- In your own way!\r\n- (Getting a job :///)"},{"id":"1/2","content":"## Tennis\r\n\r\nA and B played a game of tennis. You are given a full sequence of scores achieved by either player, for example, AABBBABABAAAB. Can you determine who won the game?\r\n"},{"id":"1/2a","content":"## A typical CP problem\r\n\r\nA CP problem has three parts:\r\n1. Problem statement\r\n2. Input / Output format\r\n3. Constraints\r\n\r\n```\r\n                       -------------\r\n    Input ABABB..A --> | black box | --> Output \"A won!\"\r\n                       -------------\r\n```"},{"id":"1/3","content":"## Solution to \"Tennis\"\r\n\r\nTrivially, we can implement the rules of tennis scoring and simulate the game point by point. With persistence, we can get this right.\r\n\r\n> Think twice, code once. - Waseem Latif\r\n\r\nIt is sufficient to notice the player who wins the last point must be the winner of the game!"},{"id":"1/4","content":"## *Elegance*\r\n\r\nIn essence, we aim to find a solution that **reveals a deep insight** into the problem. In most cases, this means the solution is:\r\n\r\n1. Simple\r\n2. Minimal\r\n3. Efficient"},{"id":"1/5","content":"## Take a look at this problem\r\n\r\n[https://cses.fi/problemset/task/1643](https://cses.fi/problemset/task/1643)\r\n\r\n$Embed(https://cses.fi/problemset/task/1643)"},{"id":"1/6","content":"## Brute force strategy\r\n\r\nTrivially, we can do what the problem tells us to do:\r\n\r\n1. Find all subarrays \r\n2. Find their sums\r\n3. Take the maximum of the sums"},{"id":"1/7","content":"$$Embed(https://www.online-python.com/)\r\n\r\n[https://www.online-python.com/](https://www.online-python.com/)\r\n\r\n$fragment(1. Implement the brute force solution)\r\n\r\n$fragment(2. Reuse previous sum)\r\n\r\n$fragment(3. Reuse previous subarray)"},{"id":"2/1","content":"## Making change\r\n*Greedy*: always make decisions that benefits you the most.\r\n\r\nFor example, consider the problem of making change with coins.\r\nSuppose you need to make Â£1.65. \r\n\r\n$1.65 = 1.00 + 0.50 + 0.10 + 0.05$\r\n\r\nThis is how a greedy mindset would work, but whether mindset will always work is another story."},{"id":"2/2","content":"Take a look at [https://cses.fi/problemset/task/1090](https://cses.fi/problemset/task/1090)\r\n\r\n$Embed(https://cses.fi/problemset/task/1090)\r\n\r\n$fragment(What would be the best decision when we are assigning gondolas?)"},{"id":"2/3","content":"## Ferris Wheel\r\n\r\nIdea: choose a child, and pair them up with the heaviest child such that their total weight does not exceed $x$. Otherwise, send them to a gondola by themself.\r\n\r\nCode plan:\r\n1. Pick the first child in our array\r\n2. Loop through our array and find the matching child\r\n3. Delete first / both from the array\r\n4. Repeat until the array is empty\r\n"},{"id":"2/4","content":"## Ferris Wheel\r\nIdea 2: Since at each step we want to find the heaviest matching child, a good idea is to sort everything first\r\n\r\nThis way when we are trying find the matching child, we can simply iterate from the back of the array, and stop when we find a match (since we know the children ahead are even lighter)\r\n\r\n$fragment(Idea 3: reuse where the previous index stopped, and start from there.)"},{"id":"2/5","content":"## Ferris Wheel\r\n\r\n$Embed(https://www.online-python.com/)\r\n\r\n$fragment(Elegant!)"},{"id":"2/6","content":"## Try it yourself!\r\n\r\nHave a go at [https://cses.fi/problemset/task/1094](https://cses.fi/problemset/task/1094)\r\n\r\n$Embed(https://cses.fi/problemset/task/1094)"},{"id":"3/1","content":"## Book Search\r\n\r\nConsider you want to look for a specific book (\"Competitive Programming 4\") in a bookstore. The best way to do this may be simply to search all the books.\r\n\r\nLuckily, the books in the bookstore are sorted in alphabetical order. Then, a reasonable strategy would be look for the area with books that start with \"C\", and then look for the desired book."},{"id":"3/2","content":"## Binary search\r\n\r\nConsider this problem, given an array of sorted numbers, determine whether a given number is within the array.\r\n\r\nWe can generalise our previous idea:\r\n1. Let's work in binary, due to its simplicity\r\n2. Abstract all numbers into either 0 or 1."},{"id":"3/3","content":"## Abstraction\r\n\r\nChange all numbers to $0$ if they are $\\lt x$, otherwise $1$. \r\nThen the problem becomes: find the first $1$ in this array, then check whether its corresponding number is $x$."},{"id":"3/4","content":"## Binary search\r\n\r\n$Embed(https://www.online-python.com/)\r\n\r\n1. Maintain left and right pointers\r\n2. Check the middle element\r\n3. Half the range as appropriate"},{"id":"3/5","content":"## Try it yourself!\r\n\r\nHave a go at [https://cses.fi/problemset/task/1640](https://cses.fi/problemset/task/1640)\r\n\r\n$Embed(https://cses.fi/problemset/task/1640)"},{"id":"4/1","content":"## Additional problems\r\n\r\nGreedy\r\n- [https://cses.fi/alon/task/1629](https://cses.fi/alon/task/1629)\r\n- [https://cses.fi/problemset/task/1084](https://cses.fi/problemset/task/1084)\r\n\r\nBinary search\r\n- [https://cses.fi/problemset/task/1641](https://cses.fi/problemset/task/1641)\r\n- [https://cses.fi/problemset/task/1620](https://cses.fi/problemset/task/1620)\r\n- [https://cses.fi/alon/task/2422](https://cses.fi/alon/task/2422)\r\n\r\nChallenge\r\n- [https://cses.fi/problemset/task/1085](https://cses.fi/problemset/task/1085)\r\n"},{"id":"4/2","content":"## Tips to get good\r\n\r\n- **PRACTICE**: Trains your intuition, leading you to the right idea faster\r\n*\"this problem smells like binary search\"*\r\n\r\n- **LEARN**: Study standard algorithms and data structures. A good resource is [CP-Algorithms](https://cp-algorithms.com/)\r\n\r\n- **SOLUTION**: Read solutions, even for problems you solved. It may uncover a \"deeper understanding\" of the problem, *elegance*!\r\n\r\n- **HAVE FUN**: With enjoyment comes motivation, and with motivation comes consistency and ultimately success!"},{"id":"4/3","content":"## References\r\n\r\n- [Inaugural Workshop 2024 Handout](https://jbachurski.github.io/uccps/workshops/inaugural.pdf)\r\n- \"Competitive Programming 4\" by Steven and Felix Halim\r\n- CSES Problem Set\r\n\r\n## Links\r\n- [https://uccps.github.io/](https://uccps.github.io/)"},{"id":"4/4","content":"# `exit(0)`\r\n\r\nThanks for coming!"}]}],["$L5","$L6","$L7"],"$L8"]}],{},null,false]},null,false],"$L9",false]],"m":"$undefined","G":["$a",["$Lb"]],"s":false,"S":true}
c:I[97367,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
e:I[11533,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
10:I[97367,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
12:I[97367,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
13:"$Sreact.suspense"
5:["$","link","0",{"rel":"stylesheet","href":"/workshop02025/_next/static/chunks/9250416d356bc8bb.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
6:["$","script","script-0",{"src":"/workshop02025/_next/static/chunks/ff1a16fafef87110.js","async":true,"nonce":"$undefined"}]
7:["$","script","script-1",{"src":"/workshop02025/_next/static/chunks/8a3eabb26aae0ead.js","async":true,"nonce":"$undefined"}]
8:["$","$Lc",null,{"children":["$Ld",["$","$Le",null,{"promise":"$@f"}]]}]
9:["$","$1","h",{"children":[null,[["$","$L10",null,{"children":"$L11"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L12",null,{"children":["$","div",null,{"hidden":true,"children":["$","$13",null,{"fallback":null,"children":"$L14"}]}]}]]}]
b:["$","link","0",{"rel":"stylesheet","href":"/workshop02025/_next/static/chunks/0412ffd35ac3b698.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
11:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
15:I[27201,["/workshop02025/_next/static/chunks/ff1a16fafef87110.js","/workshop02025/_next/static/chunks/7dd66bdf8a7e5707.js"],"IconMark"]
f:{"metadata":[["$","title","0",{"children":"UCCPS Beginners' Workshop"}],["$","meta","1",{"name":"description","content":"A workshop for beginners in UCCPS"}],["$","link","2",{"rel":"icon","href":"/workshop02025/favicon.ico?favicon.070213f7.ico","sizes":"48x48","type":"image/x-icon"}],["$","$L15","3",{}]],"error":null,"digest":"$undefined"}
14:"$f:metadata"
